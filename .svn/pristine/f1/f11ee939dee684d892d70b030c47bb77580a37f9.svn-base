<?php

class ViewDescriptor {
    
    /**
     * GET e POST
     */
    const get = 'get';
   
    const post = 'post';

    /**
     titolo finestra
     */
    private $titolo;

    /**
     definizione html del logo
     */
    private $logo_file;
    
     /**
     definizione html del header
     */
    private $header_file;

    /**
     * File che include la definizione HTML dei tab della pagina (parte dello header)
     * @var string 
     */
    private $menu_file;

    /**
     * File che include la definizione HTML della sidebar sinistra
     * @var string 
     */
    private $leftBar_file;

    /**
     definizione del content
     */
    private $content_file;

    /**
    controllo su errori
     */
    private $messaggioErrore;

    /**
     controllo su conferma
     */
    private $messaggioConferma;
    
    /**
        il tipo di pagina corrente (utente, venditore, admin)
     */
    private $pagina;
    
    /**
        sottopagina corrente
     */
    private $sottoPagina;
    
    /**
     token di impersonazione da parte dell admin 
     */
    private $impToken;

      /**
      Costruttore
     */
    public function __construct() 
    {
        ;
    }

    /**
     * Restituisce il titolo della scheda del browser
     * @return string
     */
    public function getTitolo() 
    {
        return $this->titolo;
    }

    /**
     * Imposta il titolo della scheda del browser
     * @param string $titolo il titolo della scheda del browser
     */
    public function setTitolo($titolo) 
    {
        $this->titolo = $titolo;
    }

    /**
     * Imposta il file che include la definizione HTML del logo (parte dello header)
     * @param $logoFile il path al file contentente il logo
     */
    public function setLogoFile($logoFile) 
    {
        $this->logo_file = $logoFile;
    }

    /**
     * Restituisce il path al file include la definizione HTML del logo (parte dello header)
     * @return string
     */
    public function getLogoFile() 
    {
        return $this->logo_file;
    }
    
    /**
     * Imposta il file che include la definizione HTML del logo (parte dello header)
     * @param $logoFile il path al file contentente il logo
     */
    public function setHeaderFile($logoFile) 
    {
        $this->header_file = $header_file;
    }

    /**
     * Restituisce il path al file include la definizione HTML del logo (parte dello header)
     * @return string
     */
    public function getHeaderFile() 
    {
        return $this->header_file;
    }

    /**
     * Restituisce il path al file che include la definizione HTML dei tab (parte dello header)
     * @return string
     */
    public function getMenuFile() 
    {
        return $this->menu_file;
    }

    /**
     * Imposta il path al file che include la definizione HTML dei tab (parte dello header)
     * @param string $menuFile il path al file contenente il menu
     */
    public function setMenuFile($menuFile) 
    {
        $this->menu_file = $menuFile;
    }

    /**
     * Restituisce il path al file che include la definizione HTML della sidebar sinistra
     * @return string
     */
    public function getLeftBarFile() 
    {
        return $this->leftBar_file;
    }

    /**
     * Imposta il path al file che include la definizione HTML della sidebar sinistra
     * @param type $leftBar
     */
    public function setLeftBarFile($leftBar) 
    {
        $this->leftBar_file = $leftBar;
    }

     /**
     * Imposta il file che include la definizione HTML del contenuto principale
     * @return string
     */
    public function setContentFile($contentFile) 
    {
        $this->content_file = $contentFile;
    }

    /**
     * Restituisce il path al file che contiene il contenuto principale
     * @return string
     */
    public function getContentFile() 
    {
        return $this->content_file;
    }
    
    /**
     * Restituisce il testo del messaggio di errore
     * @return string
     */
    public function getMessaggioErrore() 
    {
        return $this->messaggioErrore;
    }

      /**
     * Imposta un messaggio di errore
     * @return string
     */
    public function setMessaggioErrore($msg) 
    {
        $this->messaggioErrore = $msg;
    }

    /**
     * Restituisce il nome della sotto-pagina corrente
     * @return string
     */
    public function getSottoPagina()
    {
        return $this->sottoPagina;
    }

    /**
     * Imposta il nome della sotto-pagina corrente
     * @param string $pag
     */
    public function setSottoPagina($pag) 
    {
        $this->sottoPagina = $pag;
    }

    /**
     * Restituisce il contenuto del messaggio di conferma
     * @return string
     */
    public function getMessaggioConferma() 
    {
        return $this->messaggioConferma;
    }

    /**
     * Imposta il contenuto del messaggio di conferma
     * @param string $msg
     */
    public function setMessaggioConferma($msg) 
    {
        $this->messaggioConferma = $msg;
    }

    /**
     * Restituisce il nome della pagina corrente
     * @return string
     */
    public function getPagina() 
    {
        return $this->pagina;
    }

    /**
     * Imposta il nome della pagina corrente
     * @param string $pagina
     */
    public function setPagina($pagina) 
    {
        $this->pagina = $pagina;
    }

    
    /**
     * Restituisce il valore corrente del token per fare in modo che
     * un amministratore possa impersonare uno studente o un docente
     * @param string $token
     */
    public function setImpToken($token) 
    {
        $this->impToken = $token;
    }

    /**
     * Scrive un token per gestire quale sia l'utente che l'amministratore
     * sta impersonando per svolgere delle operazioni in sua vece. 
     *
     * @param string $pre il prefisso per attaccare il parametro del token nella 
     * query string. Si usi '?' se il token e' il primo parametro e '&' altrimenti
     * @param int $method metodo HTTP (get o set)
     * @return string il valore da scrivere nella URL in caso di get o come
     * hidden input in caso di form
     */
    public function scriviToken($pre = '', $method = self::get) {
        $imp = BaseController::impersonato;
        switch ($method) {
            case self::get:
                if (isset($this->impToken)) {
                    // nel caso della 
                    return $pre . "$imp=$this->impToken";
                }
                break;

            case self::post:
                if (isset($this->impToken)) {
                    return "<input type=\"hidden\" name=\"$imp\" value=\"$this->impToken\"/>";
                }
                break;
        }

        return '';
    }

}

?>